% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_tweet_text_representations.R
\name{create_tweet_text_representations}
\alias{create_tweet_text_representations}
\title{Create tweet text representations}
\usage{
create_tweet_text_representations(
  x,
  .keep.embeddings = FALSE,
  .compute.pcs = TRUE,
  .compute.ics = TRUE,
  .req.columns.mapping = tibble::tribble(~colname, ~accepted_types, "status_id",
    c("character", "integer"), "text", c("character"), "lang", c("character")),
  ...
)
}
\arguments{
\item{x}{a \code{data.frame} \code{\link[data.table]{data.table}}, or \code{\link[tibble]{tibble}}
recording tweets.
For required column (naming and typing conventions) refer to \code{?\link{required.tweets.df.cols}}.
For an example see \code{?\link{tweets.df.prototype}}.}

\item{.keep.embeddings}{logical. Tweet text LASER embedding representations
in return object?
Default is \code{FALSE} because for each tweet a 1024 element long double vector is returned
which may consume substantial amounts of working memory.}

\item{.compute.pcs}{logical. Project Tweet text LASER embedding onto pre-defined principal component space?
Default is \code{TRUE}.}

\item{.compute.ics}{logical. Project Tweet text LASER embedding onto pre-defined independent component space?
Default is \code{TRUE}.}

\item{.req.columns.mapping}{a two-column \code{data.frame} mapping column names to
(character vectors specifying) expected column classes.
The first column must be named \code{colname} and have type character.
The second column must be a list-column of character vectors and named \code{accepted_types}.
Default maps column name "status_id" to classes "character" or "integer",
 and "text" to "lang" to "character".}

\item{...}{Additional arguments passed to \code{\link[laserize]{laserize}}}
}
\value{
A list of four elements:
    \describe{
      \item{embeddings}{
          If \code{.keep.embeddings = FALSE} (the default), \code{NULL}.
          Otherwise, a \code{matrix} recording LASER embedding representations of tweet texts.
          Row names correspond to \code{x$status_id} (but see Note below).
          Column names refer to the 1024 embedding vectors and are named "e0001", ..., "e1024".

      }
      \item{pcs}{
          If \code{.compute.pcs = TRUE} (the default),
          a \code{matrix} recording principal component representation of tweet text LASER embeddings.
          Row names correspond to \code{x$status_id} (but see Note below).
          Column names refer to the 300 principal components and are named "pc1", ..., "pc300".
          Otherwise \code{NULL}.
      }
      \item{ics}{
          If \code{.compute.ics = TRUE} (the default),
          a \code{matrix} recording independent component representation of tweet text LASER embeddings.
          Row names correspond to \code{x$status_id} (but see Note below).
          Column names refer to the 300 independent components and are named "ic1", ..., "ic300".
          Otherwise \code{NULL}.
      }
      \item{removed}{integer vector, reporting the indexes of rows removed from \code{x} because \code{is.na(x$text)} is \code{TRUE}}
    }
}
\description{
Function obtains the LASER embedding of tweet texts,
 as well as their principal and independent component representations.
}
\details{
Tweet text LASER embedding representations are obtained using \code{\link[laserize]{laserize}}
      (see \url{https://github.com/haukelicht/laserize}).
     Each text is represented by a numeric vector with 1024 elements
      (the dimensionality of the LASER embedding space).

     To further reduce the dimensionality of tweet text representations,
      principal component analysis (PCA) and independent component analysis (ICA)
      can be applied by setting \code{.compute.pcs} and \code{.compute.ics} to \code{TRUE}, respectively.

     These lower-representations are obtained by applying
      the rotation (PCA) and de-noising (ICA) matrixes obtained by applying
      PCA and ICA to the model training and validation data before training classifiers.
      (The resulting objects can be accessed via \code{\link{laser.embedding.prcomp}} and \code{\link{laser.embedding.icomp}}.)

     Specifically, when training the constituent models of the ensemble classifier, instead of
      using the full 1024 elements long representation for texts as features,
      the dimensionality of the embedding space has been reduced to 300
      using independent component analysis (ICA) via \code{\link[fastICA]{fastICA}}.

     To project new tweet texts' LASER embeddings onto the independent components space
      used during model training, we first need to obtain LASER embedding representations
      of the new tweets' texts,
      and then use the projection matrixes obtained when applying the dimensionality reduction
      techniques to the original model training and validation data to
      obtain representations of new tweets in the independent component space.

     ICA estimates \emph{W} such that \emph{XKW = S}, where here
     \emph{X} is a \emph{n}-times-1024 matrix of the \emph{n} tweet text embedding re presentations,
      \emph{K} is a 1024-times-300 pre-whitening matrix that projects \emph{X} onto the
       first 300 principal components and is estimated from the original data,
      \emph{W} is the 300-times-300 un-mixing matrix estimated from the original data,
      and \emph{S} is the \emph{n}-times-300 source matrix of independent components.

     If \code{e} is the LASER embeddings matrix of tweet texts in \code{x},
      we thus compute the dot product of
      \code{e}, \code{laser.embedding.icomp$K}, and \code{laser.embedding.icomp$W}
      to obtain \code{ics}, the independent component representation of \code{e}.
}
\note{
Note that, strictly speaking, matrices row names do not always correspond to \code{x$status_id},
    as when \code{is.na(x$text)} is \code{TRUE} for some, these rows will not be contained
    in returned matrixes, and their status IDs will hence not be present among row names.
}
